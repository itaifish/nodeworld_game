// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// GAME SECTION BELOW

enum Resource_Type {
    FOOD
    IRON
    ALUMNINUM
    PLUTONIUM
    GOLD
}

enum Building_Type {
    CAPITAL_BUILDING
    DWELLING
    HARVESTOR
    BARRACKS
    POWER_STATION
    EXTRACTOR
}

enum Unit_Type {
    MARINE
    COMMANDER
    TANK
}

enum Item_Type {
    WARP_DRIVE
    REPAIR_KIT
}

model Unit {
    id     String    @id @default(cuid())
    type   Unit_Type
    amount Int
    Base   Base?     @relation(fields: [baseId], references: [id])
    baseId String?
}

model Resource {
    id     String        @id @default(cuid())
    type   Resource_Type
    amount Int
    Base   Base?         @relation(fields: [baseId], references: [id])
    baseId String?
}

model Building {
    id          String        @id @default(cuid())
    Base        Base?         @relation(fields: [baseId], references: [id])
    baseId      String?
    finishedAt  DateTime
    lastHarvest DateTime      @default(now())
    type        Building_Type
    hp          Int
    level       Int           @default(1)
    x           Int
    y           Int
}

model InventoryItem {
    id     String    @id @default(cuid())
    type   Item_Type
    amount Int
    Base   Base?     @relation(fields: [baseId], references: [id])
    baseId String?
}

model Base {
    id        String          @id @default(cuid())
    userId    String          @unique
    createdAt DateTime        @default(now())
    level     Int             @default(1)
    buildings Building[]
    owner     User            @relation(fields: [userId], references: [id])
    resources Resource[]
    military  Unit[]
    inventory InventoryItem[]
}

// ENG GAME SECTION
// LOGIN SECTION BELOW

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Base          Base[]
    isAdmin       Boolean   @default(false)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
