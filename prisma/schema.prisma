// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// GAME SECTION BELOW

enum Resource_Type {
    FOOD
    IRON
    ALUMNINUM
    PLUTONIUM
    GOLD
}

enum Building_Type {
    CAPITAL_BUILDING
    DWELLING
    HARVESTOR
    EXTRACTOR
    RESEARCH_LAB
    UNIVERSITY
    BARRACKS
    AEROSPACE_DEPOT
    SCATTERGUN_TURRET
    ANTI_AIRCRAFT_TURRET
    ENERGY_SHIELD_WALL
}

enum Unit_Type {
    MARINE
    COMMANDER
    TANK
}

enum Item_Type {
    WARP_DRIVE
    REPAIR_KIT
}

model Unit {
    id     String    @id @unique @default(cuid())
    type   Unit_Type
    amount Int
    Base   Base?     @relation(fields: [baseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    baseId String?
}

model Resource {
    id     String        @id @unique @default(cuid())
    type   Resource_Type
    amount Int
    Base   Base?         @relation(fields: [baseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    baseId String?
}

model Building {
    id          String        @id @unique @default(cuid())
    Base        Base?         @relation(fields: [baseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    baseId      String?
    createdAt   DateTime      @default(now())
    finishedAt  DateTime
    lastHarvest DateTime?
    type        Building_Type
    hp          Int
    level       Int           @default(1)
    x           Int
    y           Int
    isRotated   Boolean       @default(false)
}

model InventoryItem {
    id     String    @id @unique @default(cuid())
    type   Item_Type
    amount Int
    Base   Base?     @relation(fields: [baseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    baseId String?
}

model Base {
    id              String          @id @unique @default(cuid())
    userId          String          @unique
    createdAt       DateTime        @default(now())
    level           Int             @default(1)
    buildings       Building[]
    owner           User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    resources       Resource[]
    military        Unit[]
    inventory       InventoryItem[]
    establishedNode Node?
}

model Guild {
    id               String            @id @unique @default(cuid())
    createdAt        DateTime          @default(now())
    name             String
    members          GuildMembership[]
    imageURL         String?
    chat             MessageChannel    @relation(fields: [messageChannelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    messageChannelId String
    rival            Guild?            @relation("rival", fields: [rivalGuildId], references: [id])
    rivalGuildId     String?           @unique
    rivaledBy        Guild[]           @relation("rival")
    nodes            Node[]
}

model GuildMembership {
    user     User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    guild    Guild?  @relation(fields: [guildId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    guildId  String?
    userId   String
    isAdmin  Boolean @default(false)
    isLeader Boolean @default(false)

    @@id([userId])
}

// World Map

enum Terrain {
    MOUNTANS
    MEADOWS
    RADIOACTIVE
    CAVES
    DESERT
}

model Node {
    id              String    @id @unique @default(cuid())
    x               Int
    y               Int
    guildController Guild?    @relation(fields: [guildId], references: [id])
    guildId         String?
    baseNodeOf      Base?     @relation(fields: [baseId], references: [id])
    baseId          String?   @unique
    level           Int       @default(1)
    terrain         Terrain[]
    takenOverAt     DateTime?
    underAttackBy   User?     @relation(fields: [underAttackById], references: [id])
    underAttackById String?   @unique

    @@unique([x, y])
}

// END GAME SECTION
// LOGIN SECTION BELOW

// Necessary for Next auth
model Account {
    id                String  @id @unique @default(cuid())
    userId            String  @unique
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @unique @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model User {
    id              String                   @id @unique @default(cuid())
    name            String?
    email           String?                  @unique
    emailVerified   DateTime?
    image           String?
    account         Account?
    sessions        Session[]
    Base            Base[]
    isAdmin         Boolean                  @default(false)
    messageChannels UserMessageChannelLink[]
    messages        Message[]
    guildMembership GuildMembership?
    nodeAttacking   Node?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// END LOGIN SECTION
// MESSAGE SECTION BELOW

model MessageChannel {
    id       String                   @id @unique @default(cuid())
    name     String
    users    UserMessageChannelLink[]
    messages Message[]
    Guild    Guild[]
}

model UserMessageChannelLink {
    User             User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId           String
    MessageChannel   MessageChannel @relation(fields: [messageChannelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    messageChannelId String

    @@id([userId, messageChannelId])
}

model Message {
    id               String          @id @unique @default(cuid())
    createdAt        DateTime        @default(now())
    updatedAt        DateTime?
    text             String          @db.VarChar(500)
    author           User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    MessageChannel   MessageChannel? @relation(fields: [messageChannelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    messageChannelId String?
    userId           String
}
